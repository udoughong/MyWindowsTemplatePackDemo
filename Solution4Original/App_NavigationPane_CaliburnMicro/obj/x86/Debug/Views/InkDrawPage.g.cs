#pragma checksum "D:\Users\udoug\source\repos\MyWindowsTemplatePackDemo\Solution4Original\App_NavigationPane_CaliburnMicro\Views\InkDrawPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "D496CBD3969AF559C48CC11CC54B2C0E"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App_NavigationPane_CaliburnMicro.Views
{
    partial class InkDrawPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InkDrawPage_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IInkDrawPage_Bindings
        {
            private global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj2;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton obj3;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj4;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj5;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3IsCheckedDisabled = false;
            private static bool isobj4IsCheckedDisabled = false;
            private static bool isobj5IsCheckedDisabled = false;

            private InkDrawPage_obj2_BindingsTracking bindingsTracking;

            public InkDrawPage_obj2_Bindings()
            {
                this.bindingsTracking = new InkDrawPage_obj2_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 50 && columnNumber == 107)
                {
                    isobj3IsCheckedDisabled = true;
                }
                else if (lineNumber == 53 && columnNumber == 106)
                {
                    isobj4IsCheckedDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 106)
                {
                    isobj5IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\InkDrawPage.xaml line 49
                        this.obj2 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.InkToolbar)target);
                        break;
                    case 3: // Views\InkDrawPage.xaml line 50
                        this.obj3 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // Views\InkDrawPage.xaml line 53
                        this.obj4 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // Views\InkDrawPage.xaml line 56
                        this.obj5 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj2.Target as global::Windows.UI.Xaml.Controls.InkToolbar).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IInkDrawPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_EnableLassoSelection(obj.EnableLassoSelection, phase);
                        this.Update_EnableTouch(obj.EnableTouch, phase);
                        this.Update_EnableMouse(obj.EnableMouse, phase);
                    }
                }
            }
            private void Update_EnableLassoSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPage.xaml line 50
                    if (!isobj3IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj3, obj, null);
                    }
                }
            }
            private void Update_EnableTouch(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPage.xaml line 53
                    if (!isobj4IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj4, obj, null);
                    }
                }
            }
            private void Update_EnableMouse(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPage.xaml line 56
                    if (!isobj5IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj5, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_3_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableLassoSelection = (global::System.Boolean)this.obj3.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_4_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableTouch = (global::System.Boolean)this.obj4.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_5_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableMouse = (global::System.Boolean)this.obj5.IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InkDrawPage_obj2_BindingsTracking
            {
                private global::System.WeakReference<InkDrawPage_obj2_Bindings> weakRefToBindingObj; 

                public InkDrawPage_obj2_BindingsTracking(InkDrawPage_obj2_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InkDrawPage_obj2_Bindings>(obj);
                }

                public InkDrawPage_obj2_Bindings TryGetBindingObject()
                {
                    InkDrawPage_obj2_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InkDrawPage_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel obj = sender as global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_EnableLassoSelection(obj.EnableLassoSelection, DATA_CHANGED);
                                bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "EnableLassoSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableLassoSelection(obj.EnableLassoSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableTouch":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableMouse":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel obj)
                {
                    InkDrawPage_obj2_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_IsChecked();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InkDrawPage_obj6_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IInkDrawPage_Bindings
        {
            private global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj6;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton obj8;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj9;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8IsCheckedDisabled = false;
            private static bool isobj9IsCheckedDisabled = false;
            private static bool isobj10IsCheckedDisabled = false;

            private InkDrawPage_obj6_BindingsTracking bindingsTracking;

            public InkDrawPage_obj6_Bindings()
            {
                this.bindingsTracking = new InkDrawPage_obj6_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 16 && columnNumber == 111)
                {
                    isobj8IsCheckedDisabled = true;
                }
                else if (lineNumber == 19 && columnNumber == 110)
                {
                    isobj9IsCheckedDisabled = true;
                }
                else if (lineNumber == 22 && columnNumber == 110)
                {
                    isobj10IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Views\InkDrawPage.xaml line 13
                        this.obj6 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.RelativePanel)target);
                        break;
                    case 8: // Views\InkDrawPage.xaml line 16
                        this.obj8 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_8(this.obj8);
                        break;
                    case 9: // Views\InkDrawPage.xaml line 19
                        this.obj9 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_9(this.obj9);
                        break;
                    case 10: // Views\InkDrawPage.xaml line 22
                        this.obj10 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj6.Target as global::Windows.UI.Xaml.Controls.RelativePanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IInkDrawPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_EnableLassoSelection(obj.EnableLassoSelection, phase);
                        this.Update_EnableTouch(obj.EnableTouch, phase);
                        this.Update_EnableMouse(obj.EnableMouse, phase);
                    }
                }
            }
            private void Update_EnableLassoSelection(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPage.xaml line 16
                    if (!isobj8IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj8, obj, null);
                    }
                }
            }
            private void Update_EnableTouch(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPage.xaml line 19
                    if (!isobj9IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj9, obj, null);
                    }
                }
            }
            private void Update_EnableMouse(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkDrawPage.xaml line 22
                    if (!isobj10IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj10, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_8_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableLassoSelection = (global::System.Boolean)this.obj8.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_9_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableTouch = (global::System.Boolean)this.obj9.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_10_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.EnableMouse = (global::System.Boolean)this.obj10.IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InkDrawPage_obj6_BindingsTracking
            {
                private global::System.WeakReference<InkDrawPage_obj6_Bindings> weakRefToBindingObj; 

                public InkDrawPage_obj6_BindingsTracking(InkDrawPage_obj6_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InkDrawPage_obj6_Bindings>(obj);
                }

                public InkDrawPage_obj6_Bindings TryGetBindingObject()
                {
                    InkDrawPage_obj6_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InkDrawPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel obj = sender as global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_EnableLassoSelection(obj.EnableLassoSelection, DATA_CHANGED);
                                bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "EnableLassoSelection":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableLassoSelection(obj.EnableLassoSelection, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableTouch":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableTouch(obj.EnableTouch, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableMouse":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_EnableMouse(obj.EnableMouse, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::App_NavigationPane_CaliburnMicro.ViewModels.InkDrawViewModel obj)
                {
                    InkDrawPage_obj6_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_8(global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_8_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_9(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_9_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_10(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_IsChecked();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\InkDrawPage.xaml line 49
                {
                    global::Windows.UI.Xaml.Controls.InkToolbar element2 = (global::Windows.UI.Xaml.Controls.InkToolbar)(target);
                    ((global::Windows.UI.Xaml.Controls.InkToolbar)element2).Loaded += this.OnInkToolbarLoaded;
                }
                break;
            case 7: // Views\InkDrawPage.xaml line 15
                {
                    global::Windows.UI.Xaml.Controls.InkToolbar element7 = (global::Windows.UI.Xaml.Controls.InkToolbar)(target);
                    ((global::Windows.UI.Xaml.Controls.InkToolbar)element7).Loaded += this.OnInkToolbarLoaded;
                }
                break;
            case 11: // Views\InkDrawPage.xaml line 63
                {
                    this.ContentArea = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 12: // Views\InkDrawPage.xaml line 65
                {
                    this.visualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                    ((global::Windows.UI.Xaml.VisualStateGroup)this.visualStateGroup).CurrentStateChanged += this.VisualStateGroup_CurrentStateChanged;
                }
                break;
            case 13: // Views\InkDrawPage.xaml line 66
                {
                    this.SmallVisualState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 14: // Views\InkDrawPage.xaml line 71
                {
                    this.BigVisualState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 15: // Views\InkDrawPage.xaml line 82
                {
                    this.canvasScroll = (global::Windows.UI.Xaml.Controls.ScrollViewer)(target);
                }
                break;
            case 16: // Views\InkDrawPage.xaml line 99
                {
                    this.bottomCommandBar = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 17: // Views\InkDrawPage.xaml line 91
                {
                    this.inkCanvas = (global::Windows.UI.Xaml.Controls.InkCanvas)(target);
                }
                break;
            case 18: // Views\InkDrawPage.xaml line 94
                {
                    this.selectionCanvas = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 2: // Views\InkDrawPage.xaml line 49
                {                    
                    global::Windows.UI.Xaml.Controls.InkToolbar element2 = (global::Windows.UI.Xaml.Controls.InkToolbar)target;
                    InkDrawPage_obj2_Bindings bindings = new InkDrawPage_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element2, bindings);
                }
                break;
            case 6: // Views\InkDrawPage.xaml line 13
                {                    
                    global::Windows.UI.Xaml.Controls.RelativePanel element6 = (global::Windows.UI.Xaml.Controls.RelativePanel)target;
                    InkDrawPage_obj6_Bindings bindings = new InkDrawPage_obj6_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element6.DataContext);
                    element6.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element6, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element6, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

