#pragma checksum "D:\Users\udoug\source\repos\MyWindowsTemplatePackDemo\Solution4Original\App_Blank_CodeBehind\Views\InkSmartCanvasPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "D7068DF40C6E99D5BEA28AB0DC02B6D7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App_Blank_CodeBehind.Views
{
    partial class InkSmartCanvasPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_InkToolbar_TargetInkCanvas(global::Windows.UI.Xaml.Controls.InkToolbar obj, global::Windows.UI.Xaml.Controls.InkCanvas value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Controls.InkCanvas) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Controls.InkCanvas), targetNullValue);
                }
                obj.TargetInkCanvas = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class InkSmartCanvasPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IInkSmartCanvasPage_Bindings
        {
            private global::App_Blank_CodeBehind.Views.InkSmartCanvasPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.AppBarButton obj8;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj9;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj10;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj12;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj13;
            private global::Windows.UI.Xaml.Controls.InkToolbar obj18;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj20;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj21;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj22;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj24;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj25;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton obj26;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj27;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj28;
            private global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton obj29;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj8IsEnabledDisabled = false;
            private static bool isobj9IsEnabledDisabled = false;
            private static bool isobj10IsEnabledDisabled = false;
            private static bool isobj12IsEnabledDisabled = false;
            private static bool isobj13IsEnabledDisabled = false;
            private static bool isobj18TargetInkCanvasDisabled = false;
            private static bool isobj20IsEnabledDisabled = false;
            private static bool isobj21IsEnabledDisabled = false;
            private static bool isobj22IsEnabledDisabled = false;
            private static bool isobj24IsEnabledDisabled = false;
            private static bool isobj25IsEnabledDisabled = false;
            private static bool isobj26IsCheckedDisabled = false;
            private static bool isobj27IsCheckedDisabled = false;
            private static bool isobj28IsCheckedDisabled = false;
            private static bool isobj29IsCheckedDisabled = false;

            private InkSmartCanvasPage_obj1_BindingsTracking bindingsTracking;

            public InkSmartCanvasPage_obj1_Bindings()
            {
                this.bindingsTracking = new InkSmartCanvasPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 98 && columnNumber == 120)
                {
                    isobj8IsEnabledDisabled = true;
                }
                else if (lineNumber == 103 && columnNumber == 96)
                {
                    isobj9IsEnabledDisabled = true;
                }
                else if (lineNumber == 104 && columnNumber == 96)
                {
                    isobj10IsEnabledDisabled = true;
                }
                else if (lineNumber == 107 && columnNumber == 110)
                {
                    isobj12IsEnabledDisabled = true;
                }
                else if (lineNumber == 109 && columnNumber == 106)
                {
                    isobj13IsEnabledDisabled = true;
                }
                else if (lineNumber == 41 && columnNumber == 67)
                {
                    isobj18TargetInkCanvasDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 128)
                {
                    isobj20IsEnabledDisabled = true;
                }
                else if (lineNumber == 62 && columnNumber == 104)
                {
                    isobj21IsEnabledDisabled = true;
                }
                else if (lineNumber == 63 && columnNumber == 104)
                {
                    isobj22IsEnabledDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 118)
                {
                    isobj24IsEnabledDisabled = true;
                }
                else if (lineNumber == 68 && columnNumber == 114)
                {
                    isobj25IsEnabledDisabled = true;
                }
                else if (lineNumber == 42 && columnNumber == 114)
                {
                    isobj26IsCheckedDisabled = true;
                }
                else if (lineNumber == 45 && columnNumber == 117)
                {
                    isobj27IsCheckedDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 117)
                {
                    isobj28IsCheckedDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 115)
                {
                    isobj29IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8: // Views\InkSmartCanvasPage.xaml line 98
                        this.obj8 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 9: // Views\InkSmartCanvasPage.xaml line 103
                        this.obj9 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 10: // Views\InkSmartCanvasPage.xaml line 104
                        this.obj10 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 12: // Views\InkSmartCanvasPage.xaml line 107
                        this.obj12 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 13: // Views\InkSmartCanvasPage.xaml line 109
                        this.obj13 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 18: // Views\InkSmartCanvasPage.xaml line 41
                        this.obj18 = (global::Windows.UI.Xaml.Controls.InkToolbar)target;
                        break;
                    case 20: // Views\InkSmartCanvasPage.xaml line 57
                        this.obj20 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 21: // Views\InkSmartCanvasPage.xaml line 62
                        this.obj21 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 22: // Views\InkSmartCanvasPage.xaml line 63
                        this.obj22 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 24: // Views\InkSmartCanvasPage.xaml line 66
                        this.obj24 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 25: // Views\InkSmartCanvasPage.xaml line 68
                        this.obj25 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 26: // Views\InkSmartCanvasPage.xaml line 42
                        this.obj26 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_26(this.obj26);
                        break;
                    case 27: // Views\InkSmartCanvasPage.xaml line 45
                        this.obj27 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_27(this.obj27);
                        break;
                    case 28: // Views\InkSmartCanvasPage.xaml line 48
                        this.obj28 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_28(this.obj28);
                        break;
                    case 29: // Views\InkSmartCanvasPage.xaml line 51
                        this.obj29 = (global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton)target;
                        this.bindingsTracking.RegisterTwoWayListener_29(this.obj29);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                throw new global::System.NotImplementedException();
            }

            public void Recycle()
            {
                throw new global::System.NotImplementedException();
            }

            // IInkSmartCanvasPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::App_Blank_CodeBehind.Views.InkSmartCanvasPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::App_Blank_CodeBehind.Views.InkSmartCanvasPage obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TransformTextAndShapesButtonIsEnabled(obj.TransformTextAndShapesButtonIsEnabled, phase);
                        this.Update_UndoButtonIsEnabled(obj.UndoButtonIsEnabled, phase);
                        this.Update_RedoButtonIsEnabled(obj.RedoButtonIsEnabled, phase);
                        this.Update_SaveInkFileButtonIsEnabled(obj.SaveInkFileButtonIsEnabled, phase);
                        this.Update_ClearAllButtonIsEnabled(obj.ClearAllButtonIsEnabled, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_inkCanvas(obj.inkCanvas, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LassoSelectionButtonIsChecked(obj.LassoSelectionButtonIsChecked, phase);
                        this.Update_TouchInkingButtonIsChecked(obj.TouchInkingButtonIsChecked, phase);
                        this.Update_MouseInkingButtonIsChecked(obj.MouseInkingButtonIsChecked, phase);
                        this.Update_PenInkingButtonIsChecked(obj.PenInkingButtonIsChecked, phase);
                    }
                }
            }
            private void Update_TransformTextAndShapesButtonIsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 98
                    if (!isobj8IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj8, obj);
                    }
                    // Views\InkSmartCanvasPage.xaml line 57
                    if (!isobj20IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj20, obj);
                    }
                }
            }
            private void Update_UndoButtonIsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 103
                    if (!isobj9IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj9, obj);
                    }
                    // Views\InkSmartCanvasPage.xaml line 62
                    if (!isobj21IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj21, obj);
                    }
                }
            }
            private void Update_RedoButtonIsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 104
                    if (!isobj10IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    }
                    // Views\InkSmartCanvasPage.xaml line 63
                    if (!isobj22IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj22, obj);
                    }
                }
            }
            private void Update_SaveInkFileButtonIsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 107
                    if (!isobj12IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj12, obj);
                    }
                    // Views\InkSmartCanvasPage.xaml line 66
                    if (!isobj24IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj24, obj);
                    }
                }
            }
            private void Update_ClearAllButtonIsEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 109
                    if (!isobj13IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj13, obj);
                    }
                    // Views\InkSmartCanvasPage.xaml line 68
                    if (!isobj25IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj25, obj);
                    }
                }
            }
            private void Update_inkCanvas(global::Windows.UI.Xaml.Controls.InkCanvas obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 41
                    if (!isobj18TargetInkCanvasDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_InkToolbar_TargetInkCanvas(this.obj18, obj, null);
                    }
                }
            }
            private void Update_LassoSelectionButtonIsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 42
                    if (!isobj26IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj26, obj, null);
                    }
                }
            }
            private void Update_TouchInkingButtonIsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 45
                    if (!isobj27IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj27, obj, null);
                    }
                }
            }
            private void Update_MouseInkingButtonIsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 48
                    if (!isobj28IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj28, obj, null);
                    }
                }
            }
            private void Update_PenInkingButtonIsChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\InkSmartCanvasPage.xaml line 51
                    if (!isobj29IsCheckedDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj29, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_26_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.LassoSelectionButtonIsChecked = (global::System.Boolean)this.obj26.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_27_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.TouchInkingButtonIsChecked = (global::System.Boolean)this.obj27.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_28_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.MouseInkingButtonIsChecked = (global::System.Boolean)this.obj28.IsChecked;
                    }
                }
            }
            private void UpdateTwoWay_29_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.PenInkingButtonIsChecked = (global::System.Boolean)this.obj29.IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class InkSmartCanvasPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<InkSmartCanvasPage_obj1_Bindings> weakRefToBindingObj; 

                public InkSmartCanvasPage_obj1_BindingsTracking(InkSmartCanvasPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<InkSmartCanvasPage_obj1_Bindings>(obj);
                }

                public InkSmartCanvasPage_obj1_Bindings TryGetBindingObject()
                {
                    InkSmartCanvasPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    InkSmartCanvasPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::App_Blank_CodeBehind.Views.InkSmartCanvasPage obj = sender as global::App_Blank_CodeBehind.Views.InkSmartCanvasPage;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_TransformTextAndShapesButtonIsEnabled(obj.TransformTextAndShapesButtonIsEnabled, DATA_CHANGED);
                                bindings.Update_UndoButtonIsEnabled(obj.UndoButtonIsEnabled, DATA_CHANGED);
                                bindings.Update_RedoButtonIsEnabled(obj.RedoButtonIsEnabled, DATA_CHANGED);
                                bindings.Update_SaveInkFileButtonIsEnabled(obj.SaveInkFileButtonIsEnabled, DATA_CHANGED);
                                bindings.Update_ClearAllButtonIsEnabled(obj.ClearAllButtonIsEnabled, DATA_CHANGED);
                                bindings.Update_LassoSelectionButtonIsChecked(obj.LassoSelectionButtonIsChecked, DATA_CHANGED);
                                bindings.Update_TouchInkingButtonIsChecked(obj.TouchInkingButtonIsChecked, DATA_CHANGED);
                                bindings.Update_MouseInkingButtonIsChecked(obj.MouseInkingButtonIsChecked, DATA_CHANGED);
                                bindings.Update_PenInkingButtonIsChecked(obj.PenInkingButtonIsChecked, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "TransformTextAndShapesButtonIsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TransformTextAndShapesButtonIsEnabled(obj.TransformTextAndShapesButtonIsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UndoButtonIsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UndoButtonIsEnabled(obj.UndoButtonIsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RedoButtonIsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_RedoButtonIsEnabled(obj.RedoButtonIsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaveInkFileButtonIsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaveInkFileButtonIsEnabled(obj.SaveInkFileButtonIsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ClearAllButtonIsEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ClearAllButtonIsEnabled(obj.ClearAllButtonIsEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LassoSelectionButtonIsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LassoSelectionButtonIsChecked(obj.LassoSelectionButtonIsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TouchInkingButtonIsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TouchInkingButtonIsChecked(obj.TouchInkingButtonIsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MouseInkingButtonIsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MouseInkingButtonIsChecked(obj.MouseInkingButtonIsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PenInkingButtonIsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PenInkingButtonIsChecked(obj.PenInkingButtonIsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::App_Blank_CodeBehind.Views.InkSmartCanvasPage obj)
                {
                    InkSmartCanvasPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_26(global::Windows.UI.Xaml.Controls.InkToolbarCustomToolButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_26_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_27(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_27_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_28(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_28_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_29(global::Windows.UI.Xaml.Controls.InkToolbarCustomToggleButton sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_29_IsChecked();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\InkSmartCanvasPage.xaml line 9
                {
                    this.ContentArea = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3: // Views\InkSmartCanvasPage.xaml line 11
                {
                    this.visualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 4: // Views\InkSmartCanvasPage.xaml line 12
                {
                    this.SmallVisualState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5: // Views\InkSmartCanvasPage.xaml line 22
                {
                    this.BigVisualState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6: // Views\InkSmartCanvasPage.xaml line 72
                {
                    this.canvasScroll = (global::Windows.UI.Xaml.Controls.ScrollViewer)(target);
                }
                break;
            case 7: // Views\InkSmartCanvasPage.xaml line 93
                {
                    this.bottomCommandBar = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 8: // Views\InkSmartCanvasPage.xaml line 98
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element8 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element8).Click += this.TransformTextAndShapes_Click;
                }
                break;
            case 9: // Views\InkSmartCanvasPage.xaml line 103
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element9 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element9).Click += this.Undo_Click;
                }
                break;
            case 10: // Views\InkSmartCanvasPage.xaml line 104
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element10 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element10).Click += this.Redo_Click;
                }
                break;
            case 11: // Views\InkSmartCanvasPage.xaml line 106
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element11 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element11).Click += this.LoadInkFile_Click;
                }
                break;
            case 12: // Views\InkSmartCanvasPage.xaml line 107
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element12 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element12).Click += this.SaveInkFile_Click;
                }
                break;
            case 13: // Views\InkSmartCanvasPage.xaml line 109
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element13 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element13).Click += this.ClearAll_Click;
                }
                break;
            case 14: // Views\InkSmartCanvasPage.xaml line 82
                {
                    this.inkCanvas = (global::Windows.UI.Xaml.Controls.InkCanvas)(target);
                }
                break;
            case 15: // Views\InkSmartCanvasPage.xaml line 85
                {
                    this.drawingCanvas = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                }
                break;
            case 16: // Views\InkSmartCanvasPage.xaml line 88
                {
                    this.selectionCanvas = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                }
                break;
            case 17: // Views\InkSmartCanvasPage.xaml line 40
                {
                    this.headerTitle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // Views\InkSmartCanvasPage.xaml line 41
                {
                    this.toolbar = (global::Windows.UI.Xaml.Controls.InkToolbar)(target);
                }
                break;
            case 19: // Views\InkSmartCanvasPage.xaml line 55
                {
                    this.topCommandBar = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 20: // Views\InkSmartCanvasPage.xaml line 57
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element20 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element20).Click += this.TransformTextAndShapes_Click;
                }
                break;
            case 21: // Views\InkSmartCanvasPage.xaml line 62
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element21 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element21).Click += this.Undo_Click;
                }
                break;
            case 22: // Views\InkSmartCanvasPage.xaml line 63
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element22 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element22).Click += this.Redo_Click;
                }
                break;
            case 23: // Views\InkSmartCanvasPage.xaml line 65
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element23 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element23).Click += this.LoadInkFile_Click;
                }
                break;
            case 24: // Views\InkSmartCanvasPage.xaml line 66
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element24 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element24).Click += this.SaveInkFile_Click;
                }
                break;
            case 25: // Views\InkSmartCanvasPage.xaml line 68
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element25 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)element25).Click += this.ClearAll_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\InkSmartCanvasPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    InkSmartCanvasPage_obj1_Bindings bindings = new InkSmartCanvasPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

